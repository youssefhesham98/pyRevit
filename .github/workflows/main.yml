name: pyRevitCI
on:
  # when PRs from forked repos are merged
  push:
    branches:
      - develop
  # when PR from develop->master is created
  pull_request:
    branches:
      - master
  # manual run
  workflow_dispatch:

env:
  ReleaseBranch: "master"

jobs:
  build:
    runs-on: windows-latest
    steps:
      - name: Report Context
        run: |
          echo "run: ${{ github.run_number }}"
          echo "job: ${{ github.job }}"
          echo "event_name: ${{ github.event_name }}"
          echo "event_path: ${{ github.event_path }}"
          echo "repository: ${{ github.repository }}"
          echo "ref: ${{ github.ref }}"
          echo "head_ref: ${{ github.head_ref }}"
          echo "base_ref: ${{ github.base_ref }}"
          echo "commit: ${{ github.sha }}"

      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ref: ${{ github.head_ref }}

      - name: Configure Git Credentials
        uses: fregante/setup-git-user@v1

      - name: Update Submodules
        uses: snickerbockers/submodules-init@v4

      - name: Setup Python 3.9
        uses: actions/setup-python@v2.2.2
        with:
          python-version: 3.9

      - name: Install pipenv
        run: |
          pip install pipenv
          pipenv install

      - name: Check Build Environment
        run: pipenv run pyrevit check

      - name: Update Copyright Info
        run: |
          pipenv run pyrevit set year

      # WIP only
      - name: Update Build Info (WIP)
        if: (github.base_ref != env.ReleaseBranch)
        run: |
          pipenv run pyrevit set build wip

      # RELEASE only
      - name: Update Build Info (Release)
        if: (github.base_ref == env.ReleaseBranch)
        run: |
          pipenv run pyrevit set build release

      - name: Publish Build Info
        run: |
          pipenv run pyrevit set products

      - name: Build Products
        run: |
          pipenv run pyrevit build products

      - name: Get Build Version
        id: buildversion
        uses: juliangruber/read-file-action@v1
        with:
          path: pyrevitlib/pyrevit/version

      - name: Get Install Version
        id: installversion
        uses: juliangruber/read-file-action@v1
        with:
          path: release/version

      - name: Sign Binaries
        uses: skymatic/code-sign-action@v1
        with:
          certificate: "${{ secrets.CERTIFICATE }}"
          password: "${{ secrets.PASSWORD }}"
          certificatesha1: "${{ secrets.CERTIFICATESHA1 }}"
          certificatename: "${{ secrets.CERTIFICATENAME }}"
          description: "pyRevit"
          timestampUrl: "http://timestamp.digicert.com"
          folder: "bin"
          recursive: true

      - name: Build Installers
        run: |
          pipenv run pyrevit build installers

      - name: Sign Installers
        uses: skymatic/code-sign-action@v1
        with:
          certificate: "${{ secrets.CERTIFICATE }}"
          password: "${{ secrets.PASSWORD }}"
          certificatesha1: "${{ secrets.CERTIFICATESHA1 }}"
          certificatename: "${{ secrets.CERTIFICATENAME }}"
          description: "pyRevit"
          timestampUrl: "http://timestamp.digicert.com"
          folder: "dist"
          recursive: true

      # WIP only
      # default retention period is 90 days
      # https://github.com/marketplace/actions/upload-a-build-artifact#retention-period
      - name: Upload Installers
        uses: actions/upload-artifact@v2
        with:
          name: pyrevit-installers
          path: |
            dist/pyRevit_${{ steps.buildversion.outputs.content }}_signed.exe
            dist/pyRevit_${{ steps.buildversion.outputs.content }}_admin_signed.exe
            dist/pyRevit_CLI_${{ steps.buildversion.outputs.content }}_signed.exe
            dist/pyRevit_CLI_${{ steps.buildversion.outputs.content }}_admin_signed.exe

      # RELEASE only
      - name: Generate Release Notes
        if: (github.base_ref == env.ReleaseBranch)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          pipenv run pyrevit report releasenotes > release_notes.md

      # RELEASE only
      - name: Commit & Tag Changes
        if: (github.base_ref == env.ReleaseBranch)
        # configure git and commit changes
        run: |
          pipenv run pyrevit build commit
          git push
          git push --tags

      # RELEASE only
      - name: Publish Release
        id: publish_release
        if: (github.base_ref == env.ReleaseBranch)
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.buildversion.outputs.content }}
          name: pyRevit v${{ steps.buildversion.outputs.content }}
          body_path: release_notes.md
          draft: true
          prerelease: false
          files: |
            dist/pyRevit_${{ steps.buildversion.outputs.content }}_signed.exe
            dist/pyRevit_${{ steps.buildversion.outputs.content }}_admin_signed.exe
            dist/pyRevit_CLI_${{ steps.buildversion.outputs.content }}_signed.exe
            dist/pyRevit_CLI_${{ steps.buildversion.outputs.content }}_admin_signed.exe

      # RELEASE only
      - name: Publish Choco Packages
        if: (github.base_ref == env.ReleaseBranch)
        run: |
          choco apikey -k ${{ secrets.CHOCO_TOKEN}} -source https://push.chocolatey.org/
          choco push dist/pyrevit-cli.${{ steps.installversion.outputs.content }}.nupkg -s https://push.chocolatey.org/

      # RELEASE only
      - name: Merge To Master
        if: (github.base_ref == env.ReleaseBranch)
        # configure git and commit changes
        run: |
          git checkout ${{ github.base_ref }}
          git merge ${{ github.head_ref }}
          git push

      # WIP (develop) only
      - name: Notify Issue Threads (WIP)
        if: (github.ref == 'refs/heads/develop')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          pipenv run pyrevit notify wip https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}

      - name: Notify Issue Threads
        if: (github.base_ref == env.ReleaseBranch)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          pipenv run pyrevit notify release ${{ steps.publish_release.outputs.url }}
